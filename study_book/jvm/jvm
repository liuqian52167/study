# jvm
## 第一章
### Java概述和技术体系
广义上讲，Clojure、Jruby、Groovy等运行在Java虚拟机上的语言及其相关程序都属于Java技术体系的一员。sun官方给的Java技术体系
    定义：
    
    Java程序设计语言
    各种硬件平台上的Java虚拟机
    class文件格式
    来自商业机构和开源社区的第三方Java类库



### 发展史

### 虚拟机发展史
### Java技术的未来
    模块化
    混合语言
    多核并行
    
### 自己编译jdk
## 第二章
第二章Java内存区域与内存溢出异常
第三章垃圾收集器与内存分配策略
第四章虚拟机性能监控与故障处理工具
第五章调优案例分析与实战
### 2.1概述

### 2.2运行时的数据区域
Java虚拟机在执行Java程序的过程中会把它管理的内存划分若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，
有的区域随着虚拟机进程的启动而存在，有些区域则以来用户线程的启动和结束而建立和销毁。
运行时数据区
    方法区 
    虚拟机栈
    堆
    程序计数器
    本地方法栈
   
   执行引擎        本地库接口           本地方法
   
   
   有所有线程共享的数据区
   线程隔离的数据区
   
   #### 程序计数器
    程序计数器是一块较小的内存空间，可以看作是前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字符码解释器的工作时
    通过改变这个计数器的值来选取下一条需要执行字节码指令，分支、循环、跳转、异常处理、县城回复等基础功能都需要以来这个计数器完成。
    
    Java虚拟机的多线程就是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器都只会执行一条线程
    中的指令。因此为了线程切换后恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，个条线程之间计数器互不影响。独立存储
    我们称这类内存区域为线程私有的内存。
    
  #### Java虚拟机栈
  和程序计数器一样，Java虚拟机栈也是线程私有的，他的使命周期与线程相同。虚拟机描述的是Java方法执行的内存模型：每个方法在执行的同时
  都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法调用直至执行完成的过程，就对应着一个栈帧在虚拟
  机中入栈到出栈的过程。
  局部变量存放了编译期可知的各种基本数据类型（8种基本类型）对象引用类型（Reference类型，它不同于对象本身，可能是一个只想对象其实
  地址的引用指针，也可能是指向一个代表对象的句柄或其他与对象相关的位置）和ReturnAddress类型（指向一个字节码指令的地址）
  其中长度为64位的Long和Double类型的数据会占用两个局部变量空间（Slot），其余的数据类型只占用一个。局部变量表所需要的内存空间在编译期间
  完成分配，但进入一个方法时，这个方法需要在帧中分配多大局部变量空间是完全确定的。在方法运行期间不会干煸局部变量表的大小。
  Java虚拟机规范中对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度就会爆出StackOverFlowError异常。
  动态扩展时，无法申请到足够的内存，就会抛出OutOfMemoryError异常。
 #### 本地方法栈
 本地方法栈与虚拟机所发展的作用相似，它们的区别不过是虚拟机栈为虚拟机执行Java方法（字节码服务）服务，本地方法栈则为虚拟机
 使用的native方法访问。Java虚拟机规范并没有对本地方法栈中的方法使用的语言、使用方式、与数据结构没有强制规定。Java虚拟机
 规范中对这个区域规定了两种异常情况：如果线程请求的栈深度大于虚拟机所允许的深度就会爆出StackOverFlowError异常。
 #### java堆
 Java堆是Java虚拟机所管理的内存中最大的一块。是所有线程共享的一块内存区域，在虚拟机启动时创建。这个内存区域唯一的目的就是
 存放对象实例，几乎所有的对象实例都是在这里分配内存。
 
 Java堆石垃圾回收器管理的主要区域。因此很多时候被称为GC堆。从内村回收
### 2.3hotSpot虚拟机对象探秘
### 2.4OutOfMemoryError 内存溢出

## 第三章
### 3.1概述

## 第四章
## 第五章
## 第六章
## 第七章
## 第八章
## 第九章
## 第十章
## 第十一章
## 第十二章
## 第十三章
