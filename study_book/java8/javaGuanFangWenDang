# 第二章
## 2.1 面向过程编程
### 2.1.1 两种范式
### 2.1.2 抽象
### 2.1.3 OOP三原则

## 2.2 第一个程序
输入程序
编译程序

### 2.3 两种控制语句
### 2.3.1 if语句
### 2.3.2 for 循环

## 2.4 代码块
## 2.5 词汇问题
### 2.5.1空白符
### 2.5.2标识符
### 2.5.3字面值
### 2.5.4注释
### 2.5.5分隔符
### 2.5.6java关键字
## 2.6java类库
# 第三章
## 3.1 java是强类型化的语言
## 3.2 基本类型
## 3.3 整型
## 3.4 浮点型
## 3.5 字符型
## 3.6布尔型
## 3.7 深入分析字面值
## 3.8 变量
##  3.9 类型转换和强制转换类型
## 3.10 表达式中的自动类型提升
##  3.11 数组
## 3.12 关于字符串的说明








# 第十章 异常处理
## 10.1异常处理基础知识
   异常是运行时在代码序列上中引起的非正常状况。异常是运行时错误。
   
   java异常是用来描述在一段代码中发生异常情况（也就是错误）的对象。当出现引起异常的情况是，
   就会创建用来表示异常的对象，并在引起错误的地方
## 10.2异常类型
123
##10.3 未捕获的异常
## 10.4 使用try catch 语句
## 10.5多条catch语句
## 10.6 嵌套的try语句
## 10.7 throw
## 10.8 finally
## 10.9 java内置异常
## 10.10 finally
## 10.11创建自己的异常子类
## 10.12 链式异常
## 10.13 3个近期添加的异常特性
## 10.14 使用异常

# 第13章 I/O

## I/O基础：
流：流是一种抽象，要么产生信息，要么使用信息。
字节流和字符流。
字节流为处理字节的输入输出提供了方法。
字符流：为处理字符的输入输出提供了方便的的方法。
字节流类：字节流是通过两个类层次定义的。顶级抽象类InputStream和OutStream。每个抽象类都有几个处理各种不同的设备的具体子类。
BufferedInputStream 缓冲的输入流
BufferedOutputStream 缓冲的输出流
ByteArrayInputStream 读取字节数组内容的输入流
ByteArrayOutputStream 想直接数组写入内容的输出流
DataInputStream 包含读取java标准数据类型的方法的输入流
DataOutputStream 包含写入Java标准数据类型的方法的输出流
FileOutputStream想文件写入内容的输出流
FileInputStream 读取文件的输入流
Filter OutputStream 实现outputStream
FilterInputStream 实现inputStream
inputStream 描述流输入的抽象类
OutputStream 描述流输出的抽象类
ObjectInputStream 用于对象的输入流
ObjectOutputStream 用于对象的输出流
pipedInputStream 输入管道
PipedOutputStream 输出管道
PrintStream 包含print和Println方法的输出流
Push Back Input Stream支持一字节取消获取输入流，这种刘翔输入流返回一个字节。
SequenceInputStream由两个或者多个顺序依次读取的输入流组合而成的输入流。


抽象类InputStream和OutputStream定义了其他流类实现的关键方法。read() write().这盎格方法分别读取和写入字节数据。



字符流类
字符流通过两个类层次定义。顶层抽象类Reader和Writer。
BufferedReader 缓冲的输入字符流
BufferedWriter 缓冲的输出字符流
charAarrayReader 从字符数组读取呢你容的输入流
CharArrayReader 向字符数组写入内容的输出流
FileReader 从文件读取内容的输入流
FileWriter 向文件中写入内容的输出流
FilterReader 过滤器的读取器
FilterWriter 过滤器的写入器
InputStreamReader 将字节转换为字符的输入流
lineNumberReader计算行数的输入流
outputStreamwriter 将字符转换字节的输出流
PipedReader 输入管道
PipedWriter 输出管道
printWrited 包含print和println()的输出流
PushBackReader 允许字符返回到输入流的输入流
Reader 描述字符流输入的抽象类。
StringReader从字符串读取内容的输入流
StringWriter 向字符串写入内容输出流
Writer描述字符串输出的抽象类

3预定义流
所有Java程序自动导入java.lang包，这个包定义了System类，该类封装了运行时的某些方法。System包哦阔三个预定义的六变量：in\out\err。这些变量在System类中呗声明为public、static、final
System.out 引用标准的输出流，默认是控制台。System.in引用标准的输入流，默认键盘。System.err引用标准的错误流，默认情况控制台。

读取控制台输入：Java中控制台输入时System.in读取完成的为了获得与控制台关联基于字符的流，可以在BufferedReader对象中封装System.in。
构造函数Buffer额度Reader（Reader inputReader）
input Reader是与即将创建的BufferedReader的hi里链接的流Reader是抽象类，InputStreamReader是他的一个具体的子类，将该类字节转为字符。为了获得与System.in连接的InputStreamReader对象使用下面的构造函数。
inputStreamReader （Input Stream inputStream）
因为System.in引用inputStream 类型的对象，所以可以用作inputStream参数。
BufferedReader  br = new BufferedReader(new INputStreamReader(System.in));



读取字符
为了从Buffered 对象读取字符，需要使用read（）方法。
int read() throws IOException
每次调用read() 方法都会从输入读取一个字符，并将之作为整型数值返回。如果到达流的末尾，就返回-1.可以看出这种发发可能抛出IOException异常。

读取字符串
    StringReadLine （）throwsIOException
从键盘读取字符串，可以使用BufferedReader类的realLine()方法，

下面程序演示bufferedReader类和readlLine（） 方法
//
import java.io.*;
class readlins{
    public static void main(String args[]) throws IOException{
        bufferedReader
    }
}

向控制台写输出